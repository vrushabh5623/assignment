Assignment 1
Write a function sumAsync that takes two numbers as arguments and uses a callback to return their sum after a delay of 1 second.
Solution:
function sumAsync(a, b, callback) {
setTimeout(() => {
const result = a + b;
callback(result); }, 1000); }
sumAsync(3, 7, (result) => {
console.log(result); // Output: 10 });

Assignment 2
Create a function getData that returns a Promise. The Promise should resolve after 2 seconds with a message "Data fetched successfully."
Solution:
function getData() {
return new Promise((resolve) => {
setTimeout(() => {
resolve("Data fetched successfully.");
}, 2000);
});
getData().then((result) => {
}
console.log(result); // Output: Data fetched successfully. });
Assignment 3
Write an asynchronous function fetchData that uses the Fetch API to retrieve data from a given URL and returns the parsed JSON response.
API to be used
https://jsonplaceholder.typicode.com/todos/1
Solution:
async function fetchData(url) {
const response await fetch(url);
const data await response.json();
return data;
}
fetchData("https://jsonplaceholder.typicode.com/todos/1").then((data) => {
console.log(data);
// Output: {userId: 1, id: 1, title: 'delectus aut autem', completed: false } });
Assignment 4
Write an asynchronous function fetchData that uses the Fetch API to retrieve data from a given URL (https:// jsonplaceholder.typicode.com/todos/1) and returns the parsed JSON response.
async function fetchData(url) {
const response await fetch(url);
const data await response.json();
return data;
}
fetchData("https://jsonplaceholder.typicode.com/todos/1").then((data) => { console.log(data);
});
// Output: { userId: 1, id: 1, title: 'delectus aut autem', completed: false }
Assignment 5
Implement a function multiplyWithCallback that takes an array of numbers and a callback function. The function should multiply each element of the array by 2 and pass the result to the callback.
Solution
function multiplyWithCallback(numbers, callback) {
const multipliedArray = numbers.map((num) => num * 2);
callback(multiplied Array);
}
const inputArray = [1, 2, 3, 4];
multiplyWithCallback(inputArray, (result) => {
console.log(result); // Output: [2, 4, 6, 8]
});
Assignment 6
Create a function fetchUserDataAndPosts that takes a user ID and fetches the user details and their posts using separate API calls. Use promise chaining to ensure the posts are retrieved only after the user details are fetched. Return an object with user details and posts.
API to be used
For user: https://jsonplaceholder.typicode.com/users/${userld}
For post: https://jsonplaceholder.typicode.com/posts?userId=${userld}
Solution:
function fetchUserDataAndPosts(userId) {
return fetch('https://jsonplaceholder.typicode.com/users/${userId}') .then((response) => response.json())
.then((userData) => {
return fetch(
https://jsonplaceholder.typicode.com/posts?userId=${userId}
.then((response) => response.json())
.then((posts) => ({user: userData, posts }));
)
});
}
fetchUserDataAndPosts (1).then((result) => {
console.log(result); // Output: {user: (...), posts: [...]}
});
Assignment 7
Write a function fetchMultipleData that takes an array of URLs and uses Promise.all() to fetch data from all the URLs concurrently. Return an array of responses.
API to be used
Change todo id for each API call
https://jsonplaceholder.typicode.com/todos/1
JavaScript
function fetch MultipleData(urls) {
const promises urls.map((url) =>
fetch(url).then((response) => response.json()) );
   return Promise.all(promises);
}
const urlsToFetch = [
"https://jsonplaceholder.typicode.com/todos/1",
"https://jsonplaceholder.typicode.com/todos/2",
"https://jsonplaceholder.typicode.com/todos/3",
];
fetchMultipleData(urlsToFetch).then((responses) => {
console.log(responses); // Array of responses from each URL });
