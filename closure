1. You are building a counter application that tracks the number of times a button is clicked. Implement the counter using closure.
Solution:
function createCounter() {
let count=0;
return function() {
count++;
console.log('Click count: ${count}"); };
}
let clickCounter = createCounter();
// Simulate button clicks
clickCounter(); // Output: Click count: 1
clickCounter(); // Output: Click count: 2

2. You have an object representing a customer order with properties orderld, productName, and quantity. Use destructuring to extract and print these properties.
const cart shoppingCart();
console.log('Cart Items:', cart.getCartItems());
// OUTPUT: Cart Items: []
let order = { order Id: "123456", productName: "Laptop", quantity: 2 };
// Without destructuring
console.log("Without Destructuring:");
console.log("Order ID:", order.orderId); console.log("Product Name:", order.productName); console.log("Quantity:", order.quantity);
// With destructuring
let (orderId, productName, quantity) = order;
console.log("\nWith Destructuring:"); console.log("Order ID:", orderId); console.log("Product Name:", productName); console.log("Quantity:", quantity);

3. In this coding challenge let's try to implement the cart feature using javascript closure. Using JS closures try to create a cart array and return a function to getCartitems.
const cart shoppingCart();
console.log("Cart Items:', cart.getCartItems());
//OUTPUT: Cart Items: []
Solution:
function shoppingCart() {
const cartItems = [];
return {
getCartItems: function () {
return cartItems;
}
};
}
const cart = shoppingCart();
console.log('Cart Items:, cart.getCartItems());
// OUTPUT: Cart Items: []

4. Continuing the previous coding challenge, now let's implement the add to cart feature. On calling add to cart closure function, the object of productid, name, quantity and price should be added to the cartitem. Note that if duplicate items with same prouductid is added, the product quantity must be incremented. Use javascript closures to achieve the output.
const cart shoppingCart();
console.log('Cart Items:', cart.getCartItems());
//OUTPUT: Cart Items: []
const producti (id: 1, name: 'Product 1, price: 10 };
const product2{ id: 2, name: 'Product 2, price: 20);
cart.addItem(product1);
cart.addItem(product2);
cart.addItem(product1);
console.log('Cart Items:', cart.getCartItems());
//OUTPUT
//Cart Items:
(id: 1, name: "Product 1', price: 10, quantity: 2)
{ id: 2, name: 'Product 2, price: 28, quantity: 1)
//
function shoppingCart() {
const cartItems = [];
function itemIndexInCart (productId) {
return cartItems.findIndex(item=> item.id === productId);
}
return {
addItem: function (product) {
const itemIndex = itemIndexInCart(product.id);
if (itemIndex !== -1) {
cartItems[itemIndex].quantitytt;
} else {
cartItems.push({id: product.id, name: product.name, price: product.price,
quantity: 1});
}
},
getCartItems: function () {
return cartItems;
}
};
}
const cart = shoppingCart();
console.log('Cart Items:', cart.getCartItems());
//OUTPUT: Cart Items: []
const product1 = {id: 1, name: 'Product 1, price: 10);
const product2 = {id: 2, name: 'Product 2, price: 20);
cart.addItem(product1);
cart.addItem(product2);
cart.addItem(product1);
console.log('Cart Items:', cart.getCartItems());

5. Continuing the previous coding challenge, now let's implement the remove item from cart feature. On calling the remove item closure function, the specified productid item must be removed from cartitems array.Use javascript closures to achieve the output.
const cart shoppingCart();
console.log('Cart Items:', cart.getCartItems());
// OUTPUT: Cart Items: []
const product1 { id: 1, name: 'Product 1', price: 10 }; const product2 (Id: 2, name: 'Product 2, price: 20);
cart.addItem(product1);
cart.addItem(product2);
cart.addItem(product1);
console.log('Cart Items:', cart.getCartItems());
//OUTPUT:
//Cart Items: [
// (id: 1, name Product 11, price: 10, quantity: 2),
{ id: 2, name: Product 2, price: 20, quantity: 1
// 1
cart.removelten(2);
console.log('Cart Items:", cart.getCartItems());
//OUTPUT: Cart Items: [ (id: 1, name: "Product I', price: 10, quantity: 2)]
Solution:
function shoppingCart() {
const cartItems = [];
function itemIndexInCart (productId) {
return cartItems.findIndex(item => item.id === productId);
}
return {
addItem: function (product) {
const itemIndex = itemIndexInCart (product.id);
if (itemIndex !== -1) {
cartItems[itemIndex].quantity++;
} else {
cartItems.push({id: product.id, name: product.name, price: product.price,
quantity: 1});
}.
removeItem: function (productId) {
const indexToRemove = itemIndexInCart(productId);
if (indexToRemove != -1) {
cartItems.splice(indexToRemove, 1);
}
}.
getCartItems: function(){
return cartItems;
}
};
}
const cart shoppingCart();
console.log('Cart Items:', cart.getCartItems());
// OUTPUT: Cart Items: []
const product1 {id: 1, name: 'Product 1', price: 10 };
const product2=(id: 2, name: 'Product 2, price: 20};
cart.addItem(product1);
cart.addItem(product2);
cart.addItem(product1);
console.log("Cart Items:, cart.getCartItems());
// OUTPUT:
const product1 {id: 1, name: 'Product 1, price: 10);
const product2 = {id: 2, name: 'Product 2', price: 20};
cart.addItem(product1);
cart.addItem(product2);
cart.addItem(product1);
console.log('Cart Items:', cart.getCartItems());
cart.removeItem(2);
console.log('Cart Items:', cart.getCartItems());

6. You are developing a music playlist management system. Implement functions that leverage closures and higher-order functions to perform common playlist operations.
Task 1: Create a function createPlaylist that takes a playlist name as a parameter and returns a closure. This closure should allow adding and listing songs for the given playlist.
Task 2: Create a function addSong that takes a song name and artist as parameters and adds the song to the specified playlist. Use the closure created in TASK 1.
Task 3: Create a function listSongs that lists all the songs in a specified playlist. Use the closure created in the Task 1.
// Task: Playlist Management
const myPlaylist = createPlaylist("My Favorites");
addSong (myPlaylist, "Song1", "Artist1");
addSong (myPlaylist, "Song2", "Artist2");
addSong(myPlaylist, "Song3", "Artist3");
listSongs (myPlaylist); // Output: My Favorites Playlist: Song1 by Artisti, Song2 by Artist2, Song3 by Artist3
Solution:
// Task 1: Create Playlist
function createPlaylist(playlistName) {
let playlist = [];
return {
addSong: function (songName, artist) {
playlist.push({songName, artist});
},
listSongs: function() {
if (playlist.length === 0) {
console.log(${playlistName} Playlist is empty."); } else {
console.log('${playlistName) Playlist: ${playlist.map(song => ${song.songName} by ${song.artist}).join(', ')}');
}
}
};
}
// Task 2: Add Song to Playlist
function addSong (playlist, songName, artist) {
playlist.addSong (songName, artist);
}
// Task 3: List Songs in Playlist
function listSongs (playlist) {
playlist.listSongs();
}
const myPlaylist = createPlaylist("My Favorites");
addSong (myPlaylist, "Song1", "Artist1");
addSong (myPlaylist, "Song2", "Artist2");
addSong (myPlaylist, "Song3", "Artist3");
listSongs (myPlaylist); // Output: My Favorites Playlist: Song1 by Artist1, Song2 by Artist2, Song by Artist3
